CASTTranslationUnit void CWE416_Use_After_Free__malloc_free_struct_12_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    else
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* FIX: Do not free data in the source */
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
    else
    {
        /* FIX: Don't use data that may have been freed already */
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        /* do nothing */
        ; /* empty statement needed for some flow variants */
    }
}


   CASTFunctionDefinition void CWE416_Use_After_Free__malloc_free_struct_12_bad()
{
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    else
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* FIX: Do not free data in the source */
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
    else
    {
        /* FIX: Don't use data that may have been freed already */
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        /* do nothing */
        ; /* empty statement needed for some flow variants */
    }
}
      CASTSimpleDeclSpecifier void
      CASTFunctionDeclarator CWE416_Use_After_Free__malloc_free_struct_12_bad()
         CASTName CWE416_Use_After_Free__malloc_free_struct_12_bad
      CASTCompoundStatement {
    twoIntsStruct * data;
    /* Initialize data */
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    else
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* FIX: Do not free data in the source */
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
    else
    {
        /* FIX: Don't use data that may have been freed already */
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        /* do nothing */
        ; /* empty statement needed for some flow variants */
    }
}
         CASTDeclarationStatement twoIntsStruct * data;
            CASTSimpleDeclaration twoIntsStruct * data;
               CASTTypedefNameSpecifier twoIntsStruct
                  CASTName twoIntsStruct
               CASTDeclarator * data
                  CASTPointer *
                  CASTName data
         CASTExpressionStatement data = NULL;
            CASTBinaryExpression data = NULL
               CASTIdExpression data
                  CASTName data
               CASTIdExpression NULL
                  CASTName NULL
         CASTIfStatement if(globalReturnsTrueOrFalse())
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    else
    {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* FIX: Do not free data in the source */
    }
            CASTFunctionCallExpression globalReturnsTrueOrFalse()
               CASTIdExpression globalReturnsTrueOrFalse
                  CASTName globalReturnsTrueOrFalse
            CASTCompoundStatement {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
               CASTExpressionStatement data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
                  CASTBinaryExpression data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
                     CASTIdExpression data
                        CASTName data
                     CASTCastExpression (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
                        CASTTypeId twoIntsStruct *
                           CASTTypedefNameSpecifier twoIntsStruct
                              CASTName twoIntsStruct
                           CASTDeclarator *
                              CASTPointer *
                        CASTFunctionCallExpression malloc(100*sizeof(twoIntsStruct))
                           CASTIdExpression malloc
                              CASTName malloc
                           CASTBinaryExpression 100*sizeof(twoIntsStruct)
                              CASTLiteralExpression 100
                              CASTTypeIdExpression sizeof(twoIntsStruct)
                                 CASTTypeId twoIntsStruct
                                    CASTTypedefNameSpecifier twoIntsStruct
                                       CASTName twoIntsStruct
                                    CASTDeclarator 
               CASTIfStatement if (data == NULL) {exit(-1);}
                  CASTBinaryExpression data == NULL
                     CASTIdExpression data
                        CASTName data
                     CASTIdExpression NULL
                        CASTName NULL
                  CASTCompoundStatement {exit(-1);}
                     CASTExpressionStatement exit(-1);
                        CASTFunctionCallExpression exit(-1)
                           CASTIdExpression exit
                              CASTName exit
                           CASTUnaryExpression -1
                              CASTLiteralExpression 1
               CASTCompoundStatement {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
                  CASTDeclarationStatement size_t i;
                     CASTSimpleDeclaration size_t i;
                        CASTTypedefNameSpecifier size_t
                           CASTName size_t
                        CASTDeclarator i
                           CASTName i
                  CASTForStatement for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
                     CASTExpressionStatement i = 0;
                        CASTBinaryExpression i = 0
                           CASTIdExpression i
                              CASTName i
                           CASTLiteralExpression 0
                     CASTBinaryExpression i < 100
                        CASTIdExpression i
                           CASTName i
                        CASTLiteralExpression 100
                     CASTUnaryExpression i++
                        CASTIdExpression i
                           CASTName i
                     CASTCompoundStatement {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
                        CASTExpressionStatement data[i].intOne = 1;
                           CASTBinaryExpression data[i].intOne = 1
                              CASTFieldReference data[i].intOne
                                 CASTArraySubscriptExpression data[i]
                                    CASTIdExpression data
                                       CASTName data
                                    CASTIdExpression i
                                       CASTName i
                                 CASTName intOne
                              CASTLiteralExpression 1
                        CASTExpressionStatement data[i].intTwo = 2;
                           CASTBinaryExpression data[i].intTwo = 2
                              CASTFieldReference data[i].intTwo
                                 CASTArraySubscriptExpression data[i]
                                    CASTIdExpression data
                                       CASTName data
                                    CASTIdExpression i
                                       CASTName i
                                 CASTName intTwo
                              CASTLiteralExpression 2
               CASTExpressionStatement free(data);
                  CASTFunctionCallExpression free(data)
                     CASTIdExpression free
                        CASTName free
                     CASTIdExpression data
                        CASTName data
            CASTCompoundStatement {
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
        /* FIX: Do not free data in the source */
    }
               CASTExpressionStatement data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
                  CASTBinaryExpression data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
                     CASTIdExpression data
                        CASTName data
                     CASTCastExpression (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
                        CASTTypeId twoIntsStruct *
                           CASTTypedefNameSpecifier twoIntsStruct
                              CASTName twoIntsStruct
                           CASTDeclarator *
                              CASTPointer *
                        CASTFunctionCallExpression malloc(100*sizeof(twoIntsStruct))
                           CASTIdExpression malloc
                              CASTName malloc
                           CASTBinaryExpression 100*sizeof(twoIntsStruct)
                              CASTLiteralExpression 100
                              CASTTypeIdExpression sizeof(twoIntsStruct)
                                 CASTTypeId twoIntsStruct
                                    CASTTypedefNameSpecifier twoIntsStruct
                                       CASTName twoIntsStruct
                                    CASTDeclarator 
               CASTIfStatement if (data == NULL) {exit(-1);}
                  CASTBinaryExpression data == NULL
                     CASTIdExpression data
                        CASTName data
                     CASTIdExpression NULL
                        CASTName NULL
                  CASTCompoundStatement {exit(-1);}
                     CASTExpressionStatement exit(-1);
                        CASTFunctionCallExpression exit(-1)
                           CASTIdExpression exit
                              CASTName exit
                           CASTUnaryExpression -1
                              CASTLiteralExpression 1
               CASTCompoundStatement {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
        }
                  CASTDeclarationStatement size_t i;
                     CASTSimpleDeclaration size_t i;
                        CASTTypedefNameSpecifier size_t
                           CASTName size_t
                        CASTDeclarator i
                           CASTName i
                  CASTForStatement for(i = 0; i < 100; i++)
            {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
                     CASTExpressionStatement i = 0;
                        CASTBinaryExpression i = 0
                           CASTIdExpression i
                              CASTName i
                           CASTLiteralExpression 0
                     CASTBinaryExpression i < 100
                        CASTIdExpression i
                           CASTName i
                        CASTLiteralExpression 100
                     CASTUnaryExpression i++
                        CASTIdExpression i
                           CASTName i
                     CASTCompoundStatement {
                data[i].intOne = 1;
                data[i].intTwo = 2;
            }
                        CASTExpressionStatement data[i].intOne = 1;
                           CASTBinaryExpression data[i].intOne = 1
                              CASTFieldReference data[i].intOne
                                 CASTArraySubscriptExpression data[i]
                                    CASTIdExpression data
                                       CASTName data
                                    CASTIdExpression i
                                       CASTName i
                                 CASTName intOne
                              CASTLiteralExpression 1
                        CASTExpressionStatement data[i].intTwo = 2;
                           CASTBinaryExpression data[i].intTwo = 2
                              CASTFieldReference data[i].intTwo
                                 CASTArraySubscriptExpression data[i]
                                    CASTIdExpression data
                                       CASTName data
                                    CASTIdExpression i
                                       CASTName i
                                 CASTName intTwo
                              CASTLiteralExpression 2
         CASTIfStatement if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
    else
    {
        /* FIX: Don't use data that may have been freed already */
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        /* do nothing */
        ; /* empty statement needed for some flow variants */
    }
            CASTFunctionCallExpression globalReturnsTrueOrFalse()
               CASTIdExpression globalReturnsTrueOrFalse
                  CASTName globalReturnsTrueOrFalse
            CASTCompoundStatement {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printStructLine(&data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
               CASTExpressionStatement printStructLine(&data[0]);
                  CASTFunctionCallExpression printStructLine(&data[0])
                     CASTIdExpression printStructLine
                        CASTName printStructLine
                     CASTUnaryExpression &data[0]
                        CASTArraySubscriptExpression data[0]
                           CASTIdExpression data
                              CASTName data
                           CASTLiteralExpression 0
            CASTCompoundStatement {
        /* FIX: Don't use data that may have been freed already */
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
        /* do nothing */
        ; /* empty statement needed for some flow variants */
    }
               CASTNullStatement ;
