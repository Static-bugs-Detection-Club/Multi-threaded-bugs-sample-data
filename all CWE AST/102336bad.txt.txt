CASTTranslationUnit void CWE416_Use_After_Free__malloc_free_wchar_t_64_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    wmemset(data, L'A', 100-1);
    data[100-1] = L'\0';
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(&data);
}

void CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
    /* dereference dataPtr into data */
    wchar_t * data = (*dataPtr);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printWLine(data);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}


   CASTFunctionDefinition void CWE416_Use_After_Free__malloc_free_wchar_t_64_bad()
{
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    wmemset(data, L'A', 100-1);
    data[100-1] = L'\0';
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(&data);
}
      CASTSimpleDeclSpecifier void
      CASTFunctionDeclarator CWE416_Use_After_Free__malloc_free_wchar_t_64_bad()
         CASTName CWE416_Use_After_Free__malloc_free_wchar_t_64_bad
      CASTCompoundStatement {
    wchar_t * data;
    /* Initialize data */
    data = NULL;
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    wmemset(data, L'A', 100-1);
    data[100-1] = L'\0';
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(&data);
}
         CASTDeclarationStatement wchar_t * data;
            CASTSimpleDeclaration wchar_t * data;
               CASTTypedefNameSpecifier wchar_t
                  CASTName wchar_t
               CASTDeclarator * data
                  CASTPointer *
                  CASTName data
         CASTExpressionStatement data = NULL;
            CASTBinaryExpression data = NULL
               CASTIdExpression data
                  CASTName data
               CASTIdExpression NULL
                  CASTName NULL
         CASTExpressionStatement data = (wchar_t *)malloc(100*sizeof(wchar_t));
            CASTBinaryExpression data = (wchar_t *)malloc(100*sizeof(wchar_t))
               CASTIdExpression data
                  CASTName data
               CASTCastExpression (wchar_t *)malloc(100*sizeof(wchar_t))
                  CASTTypeId wchar_t *
                     CASTTypedefNameSpecifier wchar_t
                        CASTName wchar_t
                     CASTDeclarator *
                        CASTPointer *
                  CASTFunctionCallExpression malloc(100*sizeof(wchar_t))
                     CASTIdExpression malloc
                        CASTName malloc
                     CASTBinaryExpression 100*sizeof(wchar_t)
                        CASTLiteralExpression 100
                        CASTTypeIdExpression sizeof(wchar_t)
                           CASTTypeId wchar_t
                              CASTTypedefNameSpecifier wchar_t
                                 CASTName wchar_t
                              CASTDeclarator 
         CASTExpressionStatement wmemset(data, L'A', 100-1);
            CASTFunctionCallExpression wmemset(data, L'A', 100-1)
               CASTIdExpression wmemset
                  CASTName wmemset
               CASTIdExpression data
                  CASTName data
               CASTLiteralExpression L'A'
               CASTBinaryExpression 100-1
                  CASTLiteralExpression 100
                  CASTLiteralExpression 1
         CASTExpressionStatement data[100-1] = L'\0';
            CASTBinaryExpression data[100-1] = L'\0'
               CASTArraySubscriptExpression data[100-1]
                  CASTIdExpression data
                     CASTName data
                  CASTBinaryExpression 100-1
                     CASTLiteralExpression 100
                     CASTLiteralExpression 1
               CASTLiteralExpression L'\0'
         CASTExpressionStatement free(data);
            CASTFunctionCallExpression free(data)
               CASTIdExpression free
                  CASTName free
               CASTIdExpression data
                  CASTName data
         CASTExpressionStatement CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(&data);
            CASTFunctionCallExpression CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(&data)
               CASTIdExpression CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink
                  CASTName CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink
               CASTUnaryExpression &data
                  CASTIdExpression data
                     CASTName data
   CASTFunctionDefinition void CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
    /* dereference dataPtr into data */
    wchar_t * data = (*dataPtr);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printWLine(data);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
      CASTSimpleDeclSpecifier void
      CASTFunctionDeclarator CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink(void * dataVoidPtr)
         CASTName CWE416_Use_After_Free__malloc_free_wchar_t_64b_badSink
         CASTParameterDeclaration void * dataVoidPtr
            CASTSimpleDeclSpecifier void
            CASTDeclarator * dataVoidPtr
               CASTPointer *
               CASTName dataVoidPtr
      CASTCompoundStatement {
    /* cast void pointer to a pointer of the appropriate type */
    wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
    /* dereference dataPtr into data */
    wchar_t * data = (*dataPtr);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printWLine(data);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
         CASTDeclarationStatement wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
            CASTSimpleDeclaration wchar_t * * dataPtr = (wchar_t * *)dataVoidPtr;
               CASTTypedefNameSpecifier wchar_t
                  CASTName wchar_t
               CASTDeclarator * * dataPtr = (wchar_t * *)dataVoidPtr
                  CASTPointer *
                  CASTName dataPtr
                  CASTEqualsInitializer = (wchar_t * *)dataVoidPtr
                     CASTCastExpression (wchar_t * *)dataVoidPtr
                        CASTTypeId wchar_t * *
                           CASTTypedefNameSpecifier wchar_t
                              CASTName wchar_t
                           CASTDeclarator * *
                              CASTPointer *
                        CASTIdExpression dataVoidPtr
                           CASTName dataVoidPtr
         CASTDeclarationStatement wchar_t * data = (*dataPtr);
            CASTSimpleDeclaration wchar_t * data = (*dataPtr);
               CASTTypedefNameSpecifier wchar_t
                  CASTName wchar_t
               CASTDeclarator * data = (*dataPtr)
                  CASTPointer *
                  CASTName data
                  CASTEqualsInitializer = (*dataPtr)
                     CASTUnaryExpression (*dataPtr)
                        CASTUnaryExpression *dataPtr
                           CASTIdExpression dataPtr
                              CASTName dataPtr
         CASTExpressionStatement printWLine(data);
            CASTFunctionCallExpression printWLine(data)
               CASTIdExpression printWLine
                  CASTName printWLine
               CASTIdExpression data
                  CASTName data
