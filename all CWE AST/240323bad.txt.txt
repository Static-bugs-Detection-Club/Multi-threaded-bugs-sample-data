CASTTranslationUnit void CWE416_Use_After_Free__malloc_free_long_01_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i] = 5L;
        }
    }
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printLongLine(data[0]);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}


   CASTFunctionDefinition void CWE416_Use_After_Free__malloc_free_long_01_bad()
{
    long * data;
    /* Initialize data */
    data = NULL;
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i] = 5L;
        }
    }
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printLongLine(data[0]);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
      CASTSimpleDeclSpecifier void
      CASTFunctionDeclarator CWE416_Use_After_Free__malloc_free_long_01_bad()
         CASTName CWE416_Use_After_Free__malloc_free_long_01_bad
      CASTCompoundStatement {
    long * data;
    /* Initialize data */
    data = NULL;
    data = (long *)malloc(100*sizeof(long));
    if (data == NULL) {exit(-1);}
    {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i] = 5L;
        }
    }
    /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
    free(data);
    /* POTENTIAL FLAW: Use of data that may have been freed */
    printLongLine(data[0]);
    /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
}
         CASTDeclarationStatement long * data;
            CASTSimpleDeclaration long * data;
               CASTSimpleDeclSpecifier long
               CASTDeclarator * data
                  CASTPointer *
                  CASTName data
         CASTExpressionStatement data = NULL;
            CASTBinaryExpression data = NULL
               CASTIdExpression data
                  CASTName data
               CASTIdExpression NULL
                  CASTName NULL
         CASTExpressionStatement data = (long *)malloc(100*sizeof(long));
            CASTBinaryExpression data = (long *)malloc(100*sizeof(long))
               CASTIdExpression data
                  CASTName data
               CASTCastExpression (long *)malloc(100*sizeof(long))
                  CASTTypeId long *
                     CASTSimpleDeclSpecifier long
                     CASTDeclarator *
                        CASTPointer *
                  CASTFunctionCallExpression malloc(100*sizeof(long))
                     CASTIdExpression malloc
                        CASTName malloc
                     CASTBinaryExpression 100*sizeof(long)
                        CASTLiteralExpression 100
                        CASTTypeIdExpression sizeof(long)
                           CASTTypeId long
                              CASTSimpleDeclSpecifier long
                              CASTDeclarator 
         CASTIfStatement if (data == NULL) {exit(-1);}
            CASTBinaryExpression data == NULL
               CASTIdExpression data
                  CASTName data
               CASTIdExpression NULL
                  CASTName NULL
            CASTCompoundStatement {exit(-1);}
               CASTExpressionStatement exit(-1);
                  CASTFunctionCallExpression exit(-1)
                     CASTIdExpression exit
                        CASTName exit
                     CASTUnaryExpression -1
                        CASTLiteralExpression 1
         CASTCompoundStatement {
        size_t i;
        for(i = 0; i < 100; i++)
        {
            data[i] = 5L;
        }
    }
            CASTDeclarationStatement size_t i;
               CASTSimpleDeclaration size_t i;
                  CASTTypedefNameSpecifier size_t
                     CASTName size_t
                  CASTDeclarator i
                     CASTName i
            CASTForStatement for(i = 0; i < 100; i++)
        {
            data[i] = 5L;
        }
               CASTExpressionStatement i = 0;
                  CASTBinaryExpression i = 0
                     CASTIdExpression i
                        CASTName i
                     CASTLiteralExpression 0
               CASTBinaryExpression i < 100
                  CASTIdExpression i
                     CASTName i
                  CASTLiteralExpression 100
               CASTUnaryExpression i++
                  CASTIdExpression i
                     CASTName i
               CASTCompoundStatement {
            data[i] = 5L;
        }
                  CASTExpressionStatement data[i] = 5L;
                     CASTBinaryExpression data[i] = 5L
                        CASTArraySubscriptExpression data[i]
                           CASTIdExpression data
                              CASTName data
                           CASTIdExpression i
                              CASTName i
                        CASTLiteralExpression 5L
         CASTExpressionStatement free(data);
            CASTFunctionCallExpression free(data)
               CASTIdExpression free
                  CASTName free
               CASTIdExpression data
                  CASTName data
         CASTExpressionStatement printLongLine(data[0]);
            CASTFunctionCallExpression printLongLine(data[0])
               CASTIdExpression printLongLine
                  CASTName printLongLine
               CASTArraySubscriptExpression data[0]
                  CASTIdExpression data
                     CASTName data
                  CASTLiteralExpression 0
