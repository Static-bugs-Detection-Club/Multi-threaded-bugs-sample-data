CASTTranslationUnit void CWE416_Use_After_Free__malloc_free_int64_t_07_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}


   CASTFunctionDefinition void CWE416_Use_After_Free__malloc_free_int64_t_07_bad()
{
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
      CASTSimpleDeclSpecifier void
      CASTFunctionDeclarator CWE416_Use_After_Free__malloc_free_int64_t_07_bad()
         CASTName CWE416_Use_After_Free__malloc_free_int64_t_07_bad
      CASTCompoundStatement {
    int64_t * data;
    /* Initialize data */
    data = NULL;
    if(staticFive==5)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
}
         CASTDeclarationStatement int64_t * data;
            CASTSimpleDeclaration int64_t * data;
               CASTTypedefNameSpecifier int64_t
                  CASTName int64_t
               CASTDeclarator * data
                  CASTPointer *
                  CASTName data
         CASTExpressionStatement data = NULL;
            CASTBinaryExpression data = NULL
               CASTIdExpression data
                  CASTName data
               CASTIdExpression NULL
                  CASTName NULL
         CASTIfStatement if(staticFive==5)
    {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
            CASTBinaryExpression staticFive==5
               CASTIdExpression staticFive
                  CASTName staticFive
               CASTLiteralExpression 5
            CASTCompoundStatement {
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */
        free(data);
    }
               CASTExpressionStatement data = (int64_t *)malloc(100*sizeof(int64_t));
                  CASTBinaryExpression data = (int64_t *)malloc(100*sizeof(int64_t))
                     CASTIdExpression data
                        CASTName data
                     CASTCastExpression (int64_t *)malloc(100*sizeof(int64_t))
                        CASTTypeId int64_t *
                           CASTTypedefNameSpecifier int64_t
                              CASTName int64_t
                           CASTDeclarator *
                              CASTPointer *
                        CASTFunctionCallExpression malloc(100*sizeof(int64_t))
                           CASTIdExpression malloc
                              CASTName malloc
                           CASTBinaryExpression 100*sizeof(int64_t)
                              CASTLiteralExpression 100
                              CASTTypeIdExpression sizeof(int64_t)
                                 CASTTypeId int64_t
                                    CASTTypedefNameSpecifier int64_t
                                       CASTName int64_t
                                    CASTDeclarator 
               CASTIfStatement if (data == NULL) {exit(-1);}
                  CASTBinaryExpression data == NULL
                     CASTIdExpression data
                        CASTName data
                     CASTIdExpression NULL
                        CASTName NULL
                  CASTCompoundStatement {exit(-1);}
                     CASTExpressionStatement exit(-1);
                        CASTFunctionCallExpression exit(-1)
                           CASTIdExpression exit
                              CASTName exit
                           CASTUnaryExpression -1
                              CASTLiteralExpression 1
               CASTCompoundStatement {
            size_t i;
            for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
        }
                  CASTDeclarationStatement size_t i;
                     CASTSimpleDeclaration size_t i;
                        CASTTypedefNameSpecifier size_t
                           CASTName size_t
                        CASTDeclarator i
                           CASTName i
                  CASTForStatement for(i = 0; i < 100; i++)
            {
                data[i] = 5LL;
            }
                     CASTExpressionStatement i = 0;
                        CASTBinaryExpression i = 0
                           CASTIdExpression i
                              CASTName i
                           CASTLiteralExpression 0
                     CASTBinaryExpression i < 100
                        CASTIdExpression i
                           CASTName i
                        CASTLiteralExpression 100
                     CASTUnaryExpression i++
                        CASTIdExpression i
                           CASTName i
                     CASTCompoundStatement {
                data[i] = 5LL;
            }
                        CASTExpressionStatement data[i] = 5LL;
                           CASTBinaryExpression data[i] = 5LL
                              CASTArraySubscriptExpression data[i]
                                 CASTIdExpression data
                                    CASTName data
                                 CASTIdExpression i
                                    CASTName i
                              CASTLiteralExpression 5LL
               CASTExpressionStatement free(data);
                  CASTFunctionCallExpression free(data)
                     CASTIdExpression free
                        CASTName free
                     CASTIdExpression data
                        CASTName data
         CASTIfStatement if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
            CASTBinaryExpression staticFive==5
               CASTIdExpression staticFive
                  CASTName staticFive
               CASTLiteralExpression 5
            CASTCompoundStatement {
        /* POTENTIAL FLAW: Use of data that may have been freed */
        printLongLongLine(data[0]);
        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */
    }
               CASTExpressionStatement printLongLongLine(data[0]);
                  CASTFunctionCallExpression printLongLongLine(data[0])
                     CASTIdExpression printLongLongLine
                        CASTName printLongLongLine
                     CASTArraySubscriptExpression data[0]
                        CASTIdExpression data
                           CASTName data
                        CASTLiteralExpression 0
